# Author: Katharine Z. Coyte## License: Apache License 2.0import pandas as pdimport matplotlib.pyplot as pltimport numpy as npimport seaborn as snsdef load_color_variables(kingdom = 'bacteria'):	if kingdom == 'bacteria':		cmap_dict = {'Unknown_Enterobacteriaceae': [0, 250, 0],						 'Enterobacteriaceae': [0, 250, 0],		                 'Lactobacillus': [0, 50, 150],		                 'Akkermansia': [255, 255, 255],		                 'Barnesiella': [1, 127, 2],		                 'Mollicutes': [255, 255, 1],		                 'Clostridium_difficile': [255, 0, 0],		                 'Blautia': [255, 160, 160],		                 'Parasutterella': [255, 204, 102],		                 'Turicibacter': [65, 0, 128],		                 'Enterococcus': [121, 194, 77],		                 'Bacteria': [127, 127, 127],		                 'Allobaculum': [191, 171, 155],		                 'Coprobacillus': [255, 0, 122],		                 'Lachnospiraceae': [138, 40, 143],		                 'unclassified_Lachnospiraceae': [138, 40, 143],		                 'Serratia': [174, 23, 108],		                 'Ruminococcaceae': [255, 0, 92],		                 'Oscillibacter': [128, 64, 0],		                 'Clostridiales': [160,82,45],		                 'Streptococcus': [167, 157, 104],		                 'Bacteroides': [85, 107, 47],		                 'Firmicutes': [150, 150, 150],		                 'Unknown_Firmicutes': [150, 0, 250],		                 'Escherichia-Shigella': [237, 27, 36],		                 'Escherichia': [255, 20, 20],		                 'Klebsiella': [0, 157, 231], #[193, 100, 97],		                 'Dorea': [20, 255 ,0],		                 'Parabacteroides': [0, 200, 156],		                 'Coprococcus': [100, 10, 10],		                 'Sporacetigenium': [128, 255, 0],		                 'Veillonella': [100, 0, 230],		                 'Clostridium': [160,82,45],		                 'Staphylococcus': [255, 222, 0],		                 'Granulicatella': [200, 200, 200],		                 'Subdoligranulum': [235, 255, 0],		                 'Lactococcus': [255, 150, 0],		                 'Actinomyces': [54, 90, 134],		                 'Citrobacter': [198, 238, 33],		                 'Faecalibacterium': [145, 119, 3],		                 'Pseudobutyrivibrio': [85, 41, 202],		                 'Collinsella': [79, 134, 42],		                 'Campylobacterales': [153, 67, 166],		                 'Enterobacter': [175, 190, 114],		                 'Sporobacter': [21, 58, 232],		                 'Alistipes': [116, 154, 70],		                 'Leuconostoc': [120, 145, 2],		                 'Bacteroidetes': [200, 0, 200],		                 'Proteobacteria': [255, 0, 0],		                 'Actinobacteria': [255,140,0],		                 'Verrucomicrobia': [32, 254, 43],		                 'Tenericutes': [8, 143, 224],		                 'Fusobacteria': [170, 48, 94],		                 'Spirochaetes': [117, 250, 39],		                 'Cyanobacteria': [218, 164, 95],		                 'Synergistetes': [48, 109, 122],		                 'TM7': [30, 150, 57],		                 'Unknown_Bacteria': [98, 148, 64],		                 'Deferribacteres': [74, 157, 67],		                 'NA': [210, 250, 186],		                 'OD1': [87, 148, 27],		                 'Chloroflexi': [231, 224, 208],		                 'Acidobacteria': [66, 151, 5],		                 'SR1': [108, 79, 41],		                 'Pseudomonas': [0, 0, 255],		                 'Bifidobacterium':[238,145,53],		                 'Other': [50, 50, 50]		                }	if kingdom == 'fungi':       # 'Leotiomycetes', 'Microbotryomycetes', 'Mucoromycetes',       # 'Pucciniomycetes', 'Saccharomycetes', 'Sordariomycetes',       #  'Unknown_Ascomycota', 'Unknown_Basidiomycota',       # , 'Wallemiomycetes'		cmap_dict = {'Other': [50, 50, 50],					 'Unknown_Fungi': [151, 151, 151],					 'Tremellomycetes':[199, 206, 234],					 'Agaricomycetes':[140, 203, 208],					 'Arthoniomycetes':[1, 127, 2],					 'Cystobasidiomycetes':[108, 79, 41],					 'Dothideomycetes':[186,255,201],					 'Eurotiomycetes':[191, 171, 155],		             'Alternaria': [255, 202, 127],		             'Aspergillus': [250, 250, 10],		             'Beauveria': [50, 50, 50],		             'Candida': [194, 59, 34],		             'Cryptococcus':[200,206,232],		             'Saccharomycetes':[200, 90, 0],		             'Cladosporium': [255, 160, 160],		             'Cutaneotrichosporon': [50, 50, 50],		             'Filobasidium': [167,141,138],		             'Ganoderma': [50, 50, 50],		             'Guehomyces': [50, 50, 50],		             'Kluyveromyces': [50, 50, 50],		             'Malasseziomycetes':[0, 120, 120],		             'Malassezia': [0, 200, 200],		             'Naganishia': [0, 0, 255],		             'Rhodotorula': [178, 169, 45],		             'Trametes': [181, 234, 215],		             'Penicillium':[255, 20, 20]}		     #         'Microascus',		     #         'Microsporomyces',		     #         'Moesziomyces',		     #         'Mrakia',		     #         'Naganishia',		     #         'Neoascochyta',		     #         'Neosetophoma',		     #         'Ophiognomonia',		     #         'Penicillium':[255, 20, 20],		     #         'Peniophora',		     #         'Phanerochaete', 'Phialosimplex', 'Pichia',       # 'Pilatoporus', 'Piptoporus', 'Piskurozyma', 'Pseudopithomyces',       # 'Pyrenochaetopsis', 'Ramichloridium', 'Rhodosporidiobolus',       # 'Rhodotorula', 'Robbauera', 'Saccharomyces', 'Schizophyllum',       # 'Sistotrema', 'Sordaria', 'Spiromastix', 'Sporobolomyces',       # 'Steccherinum', 'Stemphylium', 'Talaromyces', 'Toxicocladosporium',       # 'Trametes', 'Trichoderma', 'Trichosporon', 'Unknown_Ascomycota',       # 'Unknown_Aureobasidiaceae', 'Unknown_Capnodiales',       # 'Unknown_Cordycipitaceae', 'Unknown_Didymellaceae',       # 'Unknown_Dothideales', 'Unknown_Fungi', 'Unknown_Helotiaceae',       # 'Unknown_Hypocreales', 'Unknown_Malasseziales',       # 'Unknown_Meruliaceae', 'Unknown_Mycosphaerellaceae',       # 'Unknown_Phaeosphaeriaceae', 'Unknown_Pleosporales',       # 'Unknown_Polyporales', 'Unknown_Ustilaginaceae', 'Ustilago',       # 'Vishniacozyma', 'Wallemia', 'Wickerhamomyces'}	if kingdom == 'archea':		cmap_dict = {'Other': [50, 50, 50],					 'empty': [150, 150, 150],		             'Haloarcula': [250, 170, 0],		             'Methanobrevibacter': [0, 170, 170],		             'Unknown_Euryarchaeota': [170, 0, 170],		             'Soil Crenarchaeotic Group(SCG)': [108, 79, 41]}	return(cmap_dict)def create_otu_colortable(otu_table, kingdom):	cmap_dict = load_color_variables(kingdom)	otu_colortable = pd.DataFrame(index = otu_table.index, columns = ['c'])	missing_taxa = pd.DataFrame()	for otu_id in otu_table.index:	    current_genus = otu_table.loc[otu_id, 'genus']	    current_family = otu_table.loc[otu_id, 'family']	    current_order = otu_table.loc[otu_id, 'order']	    current_class = otu_table.loc[otu_id, 'class']	    if current_genus in cmap_dict:	        otu_colortable.loc[otu_id, 'c'] = [x / 255 for x in cmap_dict[current_genus]]# cmap_dict[current_genus]	    elif current_family in cmap_dict:	        otu_colortable.loc[otu_id, 'c'] = [x / 255 for x in cmap_dict[current_family]]	    elif current_order in cmap_dict:	        otu_colortable.loc[otu_id, 'c'] = [x / 255 for x in cmap_dict[current_order]]	    elif current_class in cmap_dict:	        otu_colortable.loc[otu_id, 'c'] = [x / 255 for x in cmap_dict[current_class]]	    else:	    	otu_colortable.loc[otu_id, 'c'] = [x / 255 for x in cmap_dict['Other']]	    	missing_taxa = pd.concat([missing_taxa, pd.DataFrame(otu_id, index=[0], columns = [0])])	return(otu_colortable, cmap_dict)def create_data_colortable(nd, otu_table, kingdom, taxonomic_level):	normalized_data = nd.copy().drop(['babyid', 'day'],1)	otu_colortable, cmap_dict = create_otu_colortable(otu_table, kingdom)	taxonomic_colortable = pd.DataFrame(index=normalized_data.columns, columns = ['c'])	for ix in normalized_data.columns:		if taxonomic_level == 'otu':			cur_otu = [ix]		else:			cur_otu = otu_table[otu_table.loc[:,taxonomic_level]==ix].index		if len(cur_otu)>0:			cur_otu = cur_otu[0]			cur_color = otu_colortable.loc[cur_otu,'c']			taxonomic_colortable.loc[ix,'c'] = (cur_color)	taxonomic_colortable.loc['Other','c'] =  [x / 255 for x in cmap_dict['Other']]	#taxonomic_colortable = taxonomic_colortable.drop(['babyid', 'day'])	return(taxonomic_colortable)def adjust_alpha_colortable(taxonomic_colortable):	taxonomic_colortable_alpha = taxonomic_colortable.copy()	for val in np.unique(taxonomic_colortable.c):	    list_of_same = list()	    for ix in taxonomic_colortable.index:	        if np.array_equal(taxonomic_colortable.loc[ix,'c'],val):	            list_of_same.append(ix)	    num_of_same = len(list_of_same)	    alpha_range = np.linspace(1,0.3, num_of_same)	    for cc, ix in enumerate(list_of_same):	        tmp = taxonomic_colortable.loc[ix,'c'].copy()	        tmp.append(alpha_range[cc])	        taxonomic_colortable_alpha.loc[ix,'c'] = tmp	return(taxonomic_colortable_alpha)